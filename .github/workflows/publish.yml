name: Sync Figma & Publish

on:
  workflow_dispatch:
    inputs:
      sync_figma:
        type: boolean
        default: true
      publish_npm:
        type: boolean
        default: true
      deploy_pages:
        type: boolean
        default: true
  repository_dispatch:
    types: [sync-figma]
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  sync-and-publish:
    runs-on: ubuntu-latest
    environment:
      name: github-pages

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # 拉取完整提交历史

      - uses: pnpm/action-setup@v4
        with:
          run_install: false # 不要再指定 version

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          registry-url: https://registry.npmjs.org/

      - run: pnpm install

      - name: Sync Figma Icons
        if: ${{ github.event.inputs.sync_figma }}
        run: pnpm run sync:figma
        env:
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}

      - name: build icons component
        run: pnpm run build:svgs

      - name: Check for icon changes
        if: ${{ github.event.inputs.sync_figma }}
        id: check_changes
        run: |
          git add src/svgs/ src/components/ || true
          if git diff --staged --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push updated icons
        if: ${{ github.event.inputs.sync_figma && steps.check_changes.outputs.has_changes == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 先暂存当前更改（避免 rebase 冲突）
          git stash push -m "temp stash for rebase"

          # 同步远程分支
          git fetch origin master
          git rebase origin/master

          # 恢复暂存的更改
          git stash pop

          # 获取当前版本号
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # 自动递增 patch 版本号
          NEW_VERSION=$(node -p "
            const version = require('./package.json').version;
            const parts = version.split('.');
            parts[2] = (parseInt(parts[2]) + 1).toString();
            parts.join('.');
          ")
          echo "New version: $NEW_VERSION"

          # 更新 package.json 中的版本号
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          # 暂存所有更改的文件
          git add src/svgs/ src/components/ package.json

          # 提交更改
          git commit -m "chore: sync icons from Figma and bump version to v$NEW_VERSION [skip ci]"

          # 创建并推送 tag
          git tag "v$NEW_VERSION"
          git push origin master
          git push origin "v$NEW_VERSION"

      - run: pnpm run build

      - name: Build Example for GitHub Pages
        if: ${{ github.event.inputs.deploy_pages }}
        run: pnpm run build:example
        env:
          NODE_ENV: production

      - name: Setup Pages
        if: ${{ github.event.inputs.deploy_pages }}
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload Pages artifact
        if: ${{ github.event.inputs.deploy_pages }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: examples/dist

      - name: Deploy to GitHub Pages
        if: ${{ github.event.inputs.deploy_pages }}
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Trigger Vercel Deployment
        if: ${{ github.event.inputs.deploy_pages }}
        run: |
          echo "✅ GitHub Pages deployed successfully"
          echo "🚀 Vercel will auto-deploy from the pushed changes"
          echo "📊 Visit your Vercel dashboard to see deployment status"

      - name: Publish to npm
        if: ${{ github.event.inputs.publish_npm }}
        run: |
          # 检查token是否存在
          if [ -z "$NPM_TOKEN" ]; then
            echo "❌ NPM_TOKEN secret is not set!"
            exit 1
          fi

          # 设置npm认证
          npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
          npm config set registry https://registry.npmjs.org/
          npm config set access public

          # 验证认证
          echo "Testing NPM authentication..."
          npm whoami

          # 发布包
          echo "Publishing package..."
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
